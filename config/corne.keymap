/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        screenshot {
            bindings = <&kp LG(LS(NUMBER_4))>;
            key-positions = <36 17>;
        };

        emoji {
            bindings = <&kp LC(LG(SPACE))>;
            key-positions = <36 15>;
        };

        sswholescreen {
            bindings = <&kp LG(LS(NUMBER_3))>;
            key-positions = <36 16>;
        };
    };

    macros {
        option_up: option_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(UP_ARROW)>;
            label = "OPTION_UP";
        };

        option_left: option_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT)>;
            label = "OPTION_LEFT";
        };

        option_right: option_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT)>;
            label = "OPTION_RIGHT";
        };

        option_down: option_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(DOWN)>;
            label = "OPTION_DOWN";
        };

        option_backspace: option_backspace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(BACKSPACE)>;
            label = "OPTION_BACKSPACE";
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };

        kp_tap: kp_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        kp_tap_long: kp_tap_long {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TAP_LONG";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB           &kp Q                 &kp W  &kp E  &kp R                                 &kp T    &kp Y    &kp U      &kp I              &kp O    &kp P                     &kp BSPC
&kp TAB           &kp_tap LEFT_SHIFT A  &kp S  &kp D  &kp F                                 &kp G    &kp H    &kp J      &kp K              &kp L    &kp_tap RIGHT_SHIFT SEMI  &kp SINGLE_QUOTE
&kp LEFT_CONTROL  &new_behavior 3 Z     &kp X  &kp C  &kp V                                 &kp B    &kp N    &kp M      &kp COMMA          &kp DOT  &kp FSLH                  &kp ESC
                                               &mo 2  &kp_tap_long LEFT_SHIFT LEFT_COMMAND  &mo 1    &kp RET  &kp SPACE  &kp RIGHT_COMMAND
            >;
        };

        coding {
            bindings = <
&trans  &trans  &trans            &trans        &trans            &trans    &trans      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans         &trans  &trans
&trans  &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &trans    &kp ESCAPE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSPACE  &trans  &trans
&trans  &trans  &trans            &trans        &trans            &trans    &kp TAB     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans         &trans  &trans
                                  &trans        &trans            &trans    &trans      &kp SPACE             &trans
            >;
        };

        math {
            bindings = <
&trans  &kp N1     &kp N2         &kp N3         &kp N4            &kp N5           &kp N6           &kp N7        &kp N8          &kp N9         &kp N0         &trans
&trans  &kp TILDE  &kp BACKSLASH  &kp PIPE       &kp CARET         &kp AMPERSAND    &kp KP_ASTERISK  &kp KP_PLUS   &kp KP_EQUAL    &kp BACKSPACE  &kp SEMICOLON  &trans
&trans  &trans     &trans         &kp LESS_THAN  &kp GREATER_THAN  &kp GRAVE        &kp KP_SLASH     &kp KP_MINUS  &kp UNDERSCORE  &trans         &trans         &trans
                                  &trans         &trans            &trans           &trans           &kp SPACE     &kp LEFT_SHIFT
            >;
        };

        controls {
            bindings = <
&trans  &trans  &trans            &trans        &trans            &trans    &trans    &kp C_VOL_DN          &kp C_VOLUME_UP       &kp BACKSPACE  &trans  &trans
&trans  &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &trans    &kp LEFT  &kp DOWN              &kp UP                &kp RIGHT      &trans  &trans
&trans  &trans  &trans            &trans        &trans            &trans    &kp TAB   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans         &trans  &trans
                                  &trans        &kp LEFT_SHIFT    &trans    &trans    &trans                &trans
            >;
        };
    };
};
